# -*- coding: utf-8 -*-
"""KNN implementation python.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uxZhH1Lnbzarhgu6_1zPvqT7h57gHnlH
"""

import numpy as np
from collections import Counter

def euclidiean_distance(x,y):
  return np.sqrt(np.sum((x-y)**2))

class KNN:

  def __init__(self,k):
    self.k = k

  def fit(self,X,y):
    self.X_train = X
    self.y_train = y
  
  def predict(self,X):
    predict_labels = [self._predict(x) for x in X]
    return np.array(predict_labels)

  def _predict(self,x):
    # compute distances
    distances = [euclidiean_distance(x,x_train) for x_train in self.X_train]
    print('distances array : ',distances)
    # get k nearest samples , labels
    k_indices = np.argsort(distances)[0: self.k]
    print('k_indices array : ', k_indices)
    k_nearest_labels = [self.y_train[i] for i in k_indices]
    print('k_nearest_labels array : ', k_nearest_labels)
    # majority vote, most common class
    most_common = Counter(k_nearest_labels).most_common(1)
    return most_common[0][0]

if __name__ == "__main__":
    # Imports
    from matplotlib.colors import ListedColormap
    from sklearn import datasets
    from sklearn.model_selection import train_test_split
    import matplotlib.pyplot as plt
    cmap = ListedColormap(["#FF0000", "#00FF00", "#0000FF"])

    def accuracy(y_true, y_pred):
        accuracy = np.sum(y_true == y_pred) / len(y_true)
        return accuracy

    iris = datasets.load_iris()
    X, y = iris.data, iris.target
    plt.figure
    plt.scatter(X[:,0],X[:,1],c=y,cmap = cmap,edgecolor='k',s=20)
    plt.show
    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.2, random_state=1234
    )

    k = 3
    clf = KNN(k=k)
    clf.fit(X_train, y_train)
    predictions = clf.predict(X_test)
    print("KNN classification accuracy", accuracy(y_test, predictions))

plt.figure
plt.scatter(X_test[:,0],X_test[:,1],c=predictions,cmap = cmap,edgecolor='k',s=20)
plt.show

