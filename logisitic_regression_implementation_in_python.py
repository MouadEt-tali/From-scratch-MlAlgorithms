# -*- coding: utf-8 -*-
"""Logisitic Regression implementation in python.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oI09oOIqCiAUKDAnUmtpww4Ri6zTANQd

#Logistic regression using gradient descent
"""

import numpy as np

class LogisticRegression:

  def __init__(self,n_iters=1000,lr=0.001,threshold= 0.5):
    self.lr = lr
    self.n_iters = n_iters
    self.threshold = threshold
    self.weights = None
    self.bias = None

  def fit(self,X,y):
    n_samples , n_features = X.shape
    self.weights = np.zeros(n_features)
    self.bias = 0

    # gradient descent
    for _ in range(self.n_iters):
      # calculate the linear model
      linear_model = np.dot(X,self.weights) + self.bias 
      # put it in sigmoid function
      y_predicted = self._sigmoid(linear_model)     
      # calculate gradients 
      dw = (1/n_samples) * np.dot(X.T,(y_predicted-y))   
      db = (1/n_samples) * np.sum(y_predicted - y)
      # update weights and bias
      self.weights -= self.lr * dw    
      self.bias -= self.lr * db 

  def predict(self,X, threshold = 0.5):
    # calculate the linear model
    linear_model = np.dot(X,self.weights) + self.bias 
    # put it in sigmoid function
    y_predicted = self._sigmoid(linear_model)   
    
    y_predicted_result = [1 if i> self.threshold else 0 for i in y_predicted]
    return np.array(y_predicted_result)

  def _sigmoid(self,x):
    return 1/(1+np.exp(-x))

# Testing
if __name__ == "__main__":
    # Imports
    from sklearn.model_selection import train_test_split
    from sklearn import datasets

    def accuracy(y_true, y_pred):
        accuracy = np.sum(y_true == y_pred) / len(y_true)
        return accuracy

    bc = datasets.load_breast_cancer()
    X, y = bc.data, bc.target

    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.2, random_state=1234
    )

    regressor = LogisticRegression(lr=0.0001, n_iters=1000)
    regressor.fit(X_train, y_train)
    predictions = regressor.predict(X_test)

    print("LR classification accuracy:", accuracy(y_test, predictions))